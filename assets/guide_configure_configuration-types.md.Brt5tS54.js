import{_ as e,c as t,o,V as i}from"./chunks/framework.B6c1f-8R.js";const g=JSON.parse('{"title":"Configuration Types","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configure/configuration-types.md","filePath":"guide/configure/configuration-types.md","lastUpdated":1727363525000}'),a={name:"guide/configure/configuration-types.md"},n=i('<h1 id="configuration-types" tabindex="-1">Configuration Types <a class="header-anchor" href="#configuration-types" aria-label="Permalink to &quot;Configuration Types&quot;">​</a></h1><p>Configuration options have different underlying types and default values, which are denoted in code as types wrapped in a single <code>Option&lt;..&gt;</code> or in a double <code>Option&lt;Option&lt;..&gt;&gt;</code>.</p><p>In this section we explain the difference between <code>Option&lt;..&gt;</code> and <code>Option&lt;Option&lt;..&gt;&gt;</code> used for configuration types. You can find more about available configuration options in the <a href="./peer-configuration.html">Peer Configuration</a> topic.</p><h2 id="option" tabindex="-1"><code>Option&lt;..&gt;</code> <a class="header-anchor" href="#option" aria-label="Permalink to &quot;`Option&lt;..&gt;`&quot;">​</a></h2><p>A type wrapped in a single <code>Option&lt;..&gt;</code> signifies that in the corresponding <code>json</code> block there is a fallback value for this type, and that it only serves as a reference.</p><div class="warning custom-block"><p class="custom-block-title">If a default for such a type has a <code>null</code> value, it means that</p><p>there is no meaningful fallback available for this particular value. It doesn&#39;t mean that you can omit the value. Quite the opposite, it <strong>must</strong> be set manually, either in the configuration file, or via the environment variables.</p></div><p>All the default values can be freely obtained from a provided <a href="./sample-configuration.html">sample configuration file</a>, but it is only a starting point. **If left unchanged, the sample configuration file will not work. All <code>null</code> values in place of public and private keys as well as <a href="./peer-configuration.html#iroha-public-addresses">endpoint URLs</a> should be provided either by modifying the sample config file or as environment variables. No other overloading of configuration values happens besides reading them from a file and capturing the environment variables, and environment variables take precedence.</p><p>For both types of configuration options wrapped in a single <code>Option&lt;..&gt;</code> (i.e. both those that have meaningful defaults and those that have <code>null</code>), failure to provide them in any of the above two ways results in an error.</p><h2 id="option-option" tabindex="-1"><code>Option&lt;Option&lt;..&gt;&gt;</code> <a class="header-anchor" href="#option-option" aria-label="Permalink to &quot;`Option&lt;Option&lt;..&gt;&gt;`&quot;">​</a></h2><p><code>Option&lt;Option&lt;..&gt;&gt;</code> types should be distinguished from types wrapped in a single <code>Option&lt;..&gt;</code>. Only the double option ones are allowed to stay <code>null</code>, meaning that <strong>not</strong> providing them in an environment variable or a file will <strong>not</strong> cause an error.</p><p>Thus, only these types are truly optional in the common sense of the word. An example of this distinction is genesis <a href="./peer-configuration.html#genesis">public and private keys</a>. While the first one is a single <code>Option&lt;..&gt;</code> wrapped type, the latter is wrapped in <code>Option&lt;Option&lt;..&gt;&gt;</code>. This means that the genesis <em>public</em> key should always be provided by the user, be it via a file config or an environment variable, whereas the <em>private</em> key is only needed for the peer that submits the genesis block, and can be omitted for all others. The same logic goes for other double option fields such as logger file path.</p><h2 id="sumeragi-default-null-values" tabindex="-1">Sumeragi: default <code>null</code> values <a class="header-anchor" href="#sumeragi-default-null-values" aria-label="Permalink to &quot;Sumeragi: default `null` values&quot;">​</a></h2><p>A special note about Sumeragi fields with <code>null</code> as default: only the <a href="./peer-configuration.html#trusted-peers"><code>trusted_peers</code></a> field out of the three can be initialized via a provided file or an environment variable.</p><p>The other two fields, namely <code>key_pair</code> and <code>peer_id</code>, go through a process of finalization where their values are derived from the corresponding ones in the uppermost Iroha config (using its <code>public_key</code> and <code>private_key</code> fields) or the Torii config (via its <code>p2p_addr</code>). This ensures that these linked fields stay in sync, and prevents the programmer error when different values are provided to these field pairs. Providing either <code>sumeragi.key_pair</code> or <code>sumeragi.peer_id</code> by hand will result in an error, as it should never be done directly. In later versions these configuration options shall be hidden completely.</p>',14),r=[n];function l(s,d,p,c,h,u){return o(),t("div",null,r)}const m=e(a,[["render",l]]);export{g as __pageData,m as default};
