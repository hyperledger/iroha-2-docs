import{_ as i,E as a,c as s,J as r,V as e,o}from"./chunks/framework.B6c1f-8R.js";const y=JSON.parse('{"title":"Triggers","description":"","frontmatter":{},"headers":[],"relativePath":"blockchain/triggers.md","filePath":"blockchain/triggers.md","lastUpdated":1727363525000}'),n={name:"blockchain/triggers.md"},c=e('<h1 id="triggers" tabindex="-1">Triggers <a class="header-anchor" href="#triggers" aria-label="Permalink to &quot;Triggers&quot;">​</a></h1><p>Certain things, such as changing the state of an entity, committing a block or <a href="#supported-isi">executing an Iroha Special Instruction (ISI)</a>, can emit <a href="./events.html">events</a>, and you can attach <em>triggers</em> to these events.</p><p>A <em>trigger</em> is a fairly basic entity that can be registered. Just like with Accounts, to register a trigger, you submit a <code>RegisterBox::Trigger</code>, which contains the necessary information:</p><ul><li>an account ID, which should ideally be a brand new account that you register in the same transaction</li><li>an executable, which itself is either a <code>Vec&lt;Instruction&gt;</code> or a WASM blob</li><li>an <code>EventFilter</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, which is something that combs through all<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> events and returns <code>true</code> when it finds the matching event to start the execution</li></ul><p>Let&#39;s take a closer look at how triggers work.</p><h2 id="the-anatomy-of-a-trigger" tabindex="-1">The Anatomy of a Trigger <a class="header-anchor" href="#the-anatomy-of-a-trigger" aria-label="Permalink to &quot;The Anatomy of a Trigger&quot;">​</a></h2><p>A trigger has roughly the following form:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TriggerId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="trigger-id" tabindex="-1"><code>Trigger.id</code> <a class="header-anchor" href="#trigger-id" aria-label="Permalink to &quot;`Trigger.id`&quot;">​</a></h3><p>The <code>TriggerId</code> is a simple wrapper around a single <code>Name</code>, a string with no whitespaces and no reserved characters (<code>@</code>, <code>#</code>, <code>$</code>).</p><p>A typical <a href="#domain-scoped-triggers">domain-scoped trigger</a> looks like <code>trigger_id$domain_name</code>, while a bare trigger looks like <code>@@trigger_id</code>, which makes these names easy to parse.</p><h3 id="trigger-action" tabindex="-1"><code>Trigger.action</code> <a class="header-anchor" href="#trigger-action" aria-label="Permalink to &quot;`Trigger.action`&quot;">​</a></h3><p>An <code>Action</code> is the heart of the trigger. It is defined like this:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  executable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repeats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Repeats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  technical_account</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="action-executable" tabindex="-1"><code>Action.executable</code> <a class="header-anchor" href="#action-executable" aria-label="Permalink to &quot;`Action.executable`&quot;">​</a></h4><p>The executable linked to this action, either a <code>Vec&lt;Instruction&gt;</code> or a WASM binary.</p><h4 id="action-repeats" tabindex="-1"><code>Action.repeats</code> <a class="header-anchor" href="#action-repeats" aria-label="Permalink to &quot;`Action.repeats`&quot;">​</a></h4><p>The <code>Repeats</code> is a universal enumeration of all possible repetition schemes.</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Repeats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Indefinitely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Exactly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">u32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="action-technical-account" tabindex="-1"><code>Action.technical_account</code> <a class="header-anchor" href="#action-technical-account" aria-label="Permalink to &quot;`Action.technical_account`&quot;">​</a></h4><p>A technical account is the account that would (in theory) be responsible for the execution environment and be the authority for <code>Instruction</code> execution.</p><p>For now, you can leave this as the account that registered the trigger. If you have been following the tutorial, this is <code>alice@wonderland</code>. However, later on we will show you why you&#39;d want to create a brand new account for those purposes.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that you can only use the account that already exists in order to be able to register a new trigger.</p></div><h4 id="action-filter" tabindex="-1"><code>Action.filter</code> <a class="header-anchor" href="#action-filter" aria-label="Permalink to &quot;`Action.filter`&quot;">​</a></h4><p>A filter is what determines what <em>kind</em> of trigger you&#39;re dealing with. All triggers respond to events, but the precise type of event that activates a trigger depends on which <code>EventFilter</code> was used.</p><p>The reason why we chose this architecture is simple; front end code has an abundance of event filters, and so, your knowledge of filters is transferable to writing smart contracts.</p><h4 id="action-metadata" tabindex="-1"><code>Action.metadata</code> <a class="header-anchor" href="#action-metadata" aria-label="Permalink to &quot;`Action.metadata`&quot;">​</a></h4><p>This <code>Metadata</code> is the same kind of <code>Metadata</code> that can be attached to accounts, domains, assets, or transactions. This is the storage for trigger data.</p><p>You can learn more about metadata in a <a href="/iroha-2-docs/blockchain/metadata.html">dedicated section</a>.</p><h2 id="how-triggers-work" tabindex="-1">How Triggers Work <a class="header-anchor" href="#how-triggers-work" aria-label="Permalink to &quot;How Triggers Work&quot;">​</a></h2><p>As we already said, the <code>filter</code> that is used to register a trigger determines what kind of trigger this is. It is, of course, also determines how the trigger works, e.g. when it is executed. We will go into more details about the types of triggers in just a moment.</p><p>First, we shall point out that there two other characteristics of a trigger that determine how this trigger works: its scope and repetition schema.</p><h3 id="scope" tabindex="-1">Scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;Scope&quot;">​</a></h3><p>Triggers can be scoped and un-scoped. Iroha supports both un-scoped system-wide triggers as well as <a href="#domain-scoped-triggers">domain-scoped triggers</a>. Since system-wide triggers scan all events, and domain-scoped triggers only scan events emitted in a certain domain, it is highly recommended to use domain-scoped triggers where possible.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Be mindful of the limitations. Currently triggers don&#39;t check for permissions , so they can do things your account wouldn&#39;t be allowed to. Un-scoped triggers process <em>every</em> event, and the amount of work grows quadratically.</p></div><h4 id="domain-scoped-triggers" tabindex="-1">Domain-scoped Triggers <a class="header-anchor" href="#domain-scoped-triggers" aria-label="Permalink to &quot;Domain-scoped Triggers&quot;">​</a></h4><p>While un-scoped triggers check all events of a specified type, domain-scoped triggers only look for events in a given domain. These triggers are more optimised compared to un-scoped triggers.</p><p>You can use <a href="/iroha-2-docs/reference/queries.html#findtriggersbydomainid"><code>FindTriggersByDomainId</code></a> query to find triggers for the given domain.</p><p>When you register a domain-scoped trigger, you need to add the domain id to the trigger id using <code>$</code> symbol: <code>my_trigger$my_domain</code>.</p><h3 id="repetition-schema" tabindex="-1">Repetition Schema <a class="header-anchor" href="#repetition-schema" aria-label="Permalink to &quot;Repetition Schema&quot;">​</a></h3><p>Each such trigger can be set to repeat either <code>Indefinitely</code> or <code>Exactly(n)</code> times, where <code>n</code> is a 32-bit integer. Once the number of repetitions reaches zero, the trigger is gone. That means that if your trigger got repeated exactly <code>n</code> times, you can&#39;t <code>Mint</code> new repetitions, you have to <code>Register</code> it again, with the same name.</p><p>After a trigger is repeated for the last time, i.e. the execution count reaches <code>0</code>, the trigger should be un-registered.</p><h2 id="types-of-triggers" tabindex="-1">Types of Triggers <a class="header-anchor" href="#types-of-triggers" aria-label="Permalink to &quot;Types of Triggers&quot;">​</a></h2><p>We shall cover the following basic types of triggers and provide you with the detailed information on how to use each of them:</p><ul><li><a href="#data-triggers">Data triggers</a></li><li><a href="#time-triggers">Time triggers</a><ul><li><a href="#scheduled-triggers">Scheduled triggers</a></li><li><a href="#pre-commit-triggers">Pre-commit triggers</a></li></ul></li><li><a href="#by-call-triggers">By-call triggers</a></li></ul><p>All triggers are essentially <strong>event triggers</strong>. The type of a trigger is determined by the type of an event that trigger is associated with. This, in turn, is determined by the <code>filter</code> used to register a trigger.</p>',46),l=e('<h3 id="data-triggers" tabindex="-1">Data Triggers <a class="header-anchor" href="#data-triggers" aria-label="Permalink to &quot;Data Triggers&quot;">​</a></h3><p>This category includes the largest variety of triggers. The events that are associated with this trigger type account for the vast majority of events in Ethereum. These are <a href="./events.html#data-events">data-related events</a>, such as: an account got registered, an asset got transferred, the Queen of Hearts decided to burn all of her assets.</p><h3 id="time-triggers" tabindex="-1">Time Triggers <a class="header-anchor" href="#time-triggers" aria-label="Permalink to &quot;Time Triggers&quot;">​</a></h3><p>Time triggers behave slightly differently compared to data triggers. There are two sub-types of this type: <a href="#scheduled-triggers">scheduled triggers</a> and <a href="#pre-commit-triggers">pre-commit triggers</a>.</p><p>Instead of processing all the events generated by normal transactions, all time triggers process one event: the <strong>block formation event</strong>.</p><p>The filters of scheduled triggers are only interested in the timestamp provided in that event, but not the block height, and not the current time. They are executed according to a certain schedule. Pre-commit triggers, on the other hand, are executed right before a block is committed.</p><h4 id="scheduled-triggers" tabindex="-1">Scheduled Triggers <a class="header-anchor" href="#scheduled-triggers" aria-label="Permalink to &quot;Scheduled Triggers&quot;">​</a></h4><p>When going through consensus, all peers must agree on which triggers got executed. Scheduled triggers can&#39;t use real time, because then you can easily create a situation when they would never agree: e.g. by giving the <code>Repeats::Indefinitely</code> trigger a period that is smaller than the time it takes to pass consensus. It&#39;s really that simple.</p><p>So instead of using the actual current time at each peer, we use the time when the block got started plus a small offset. All triggers before that point in time get executed. All triggers that would be executed after that time wait for the next block.</p><details class="details custom-block"><summary>Why we use the offset</summary><p>The reason why we add this offset has to do with Iroha being <em>best effort</em>.</p><p>Imagine if we didn&#39;t have the offset... Normally, triggers would be set to nice round numbers; e.g. <code>12:00</code>, <code>12:05</code>, <code>11:55</code>, etc. (as opposed to e.g. <code>11:59</code>). However, the consensus can start at any point in time and could last a while.</p><p>Suppose that the block started to form at <code>11:56</code> and consensus finished at <code>12:03</code> (which is optimistically quick). Let&#39;s consider different scenarios:</p><ul><li>If your trigger was supposed to run at <code>11:55</code>, you&#39;d be happy, since your trigger got executed just 1 minute late.</li><li>If your trigger was supposed to run at <code>12:05</code>, it will run in the next block, not the one that was formed at <code>11:56</code>. If you&#39;re the author and you&#39;re looking at the time stamp of <code>12:03</code>, it makes sense, your trigger wasn&#39;t supposed to run yet.</li><li>For the trigger scheduled for <code>12:00</code>, the situation is different. You look at the clock, you see <code>12:03</code>, which is when the blockchain explorer shows you the block data was committed, but you don&#39;t see your trigger. It was supposed to run, but didn&#39;t.</li></ul><p>So, the offset is meant to anticipate when the block would get added to the chain, so that people who were just 4 minutes early don&#39;t have to be potentially several hours late.</p><p>Because more triggers get executed sooner, your throughput is also infinitesimally smaller.</p><p>We could also say &quot;you should aim to execute your trigger slightly earlier than consensus starts&quot;, but people writing smart contracts already have too much to worry about.</p></details><h4 id="pre-commit-triggers" tabindex="-1">Pre-commit Triggers <a class="header-anchor" href="#pre-commit-triggers" aria-label="Permalink to &quot;Pre-commit Triggers&quot;">​</a></h4><p>This is a variant of timed triggers that gets run before blocks with transactions get committed. It leaves a special event to be triggered in the next block. Effectively, it&#39;s a delayed pre-commit that can track the behaviour of transactions in the pipeline.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>These triggers are not meant for restricting the execution of transactions.</p><p>If you want to stop your users from transferring more than X amount of Y to user Z, you really want a <em>permission</em>. While you could hack the pre-commit triggers to emulate the desired behaviour, this is not economical neither in terms of gas fees nor computation.</p><p>Until Iroha 2 supports WASM-based <em>permissions validators</em>, however, your only choice is pre-commit triggers.</p></div><h3 id="by-call-triggers" tabindex="-1">By-call Triggers <a class="header-anchor" href="#by-call-triggers" aria-label="Permalink to &quot;By-call Triggers&quot;">​</a></h3><p>These triggers only get executed once the <code>CallTrigger(trigger_name)</code> instruction is executed. They can be useful if you want to achieve dynamic linkage between different smart contract modules.</p><p>Space is precious, so you want to use as little of it as you can. Thus, you follow the UNIX design philosophy, and instead of creating one large smart contract, you create many smaller ones, and re-use as much logic as you can.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Of course, this is a rather exotic use case, so it shall be implemented last.</p></div><h2 id="supported-isi" tabindex="-1">Supported ISI <a class="header-anchor" href="#supported-isi" aria-label="Permalink to &quot;Supported ISI&quot;">​</a></h2><p>All Iroha Special Instructions work with triggers, specifically:</p><ul><li><p><code>Register&lt;Trigger&gt;</code>: Create a trigger object and subscribe it to global events.</p></li><li><p><code>Unregister&lt;Trigger&gt;</code>: Remove a trigger from the World State View and stop passing events through it.</p></li><li><p><code>Mint&lt;Trigger, u32&gt;</code>: For triggers that repeat a certain number of times, increase the number of times that the trigger gets executed. Can be done from inside the executable of the trigger.</p></li><li><p><code>Burn&lt;Trigger, u32&gt;</code>: For triggers that repeat a certain number of times, decrease the number of times that the trigger gets executed.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If the number provided is greater than the remaining number of repetitions, the instruction will fail to execute, and the transaction that it is part of will be rejected.</p></div></li></ul><p>You can learn more about Iroha Special Instructions in the <a href="./instructions.html">dedicated section</a>.</p><h2 id="supported-queries" tabindex="-1">Supported Queries <a class="header-anchor" href="#supported-queries" aria-label="Permalink to &quot;Supported Queries&quot;">​</a></h2><p>We <a href="/iroha-2-docs/reference/queries.html#trigger">list supported queries</a> for triggers when we talk in more detail about queries in the next chapter.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>The documentation on the <code>EventFilter</code> types is under construction, as we are likely to make major changes to that particular architecture. For now, suffice it to say that you can look at the <a href="https://github.com/hyperledger/iroha/blob/main/data_model/src/events/data/filters.rs" target="_blank" rel="noreferrer">source code</a> in <code>iroha_data_model</code> and see a few particularly interesting applications. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>This behaviour is likely to change in future releases.</p><a href="#fnref2" class="footnote-backref">↩︎</a></li></ol></section>',25);function h(d,g,p,u,m,k){const t=a("MermaidRenderWrap");return o(),s("div",null,[c,r(t,{id:"mermaid_79eaa517dfee336607034fec2fd701367be409be118356c9efd26a71dab658d37df3c8bb95a16a92b1cabc6118ec2e6ba2fda13bc753c4dd54aeaee6076b6256",text:"classDiagram%0A%0Aclass%20Trigger~F%3A%20Filter~%0A%0Aclass%20time_trigger~TimeEventFilter~%0Aclass%20data_trigger~DataEventFilter~%0Aclass%20by_call_trigger~ExecuteTriggerEventFilter~%0Aclass%20pipeline_trigger~PipelineEventFilter~%0A%0Aclass%20precommit_trigger~TimeEventFilter(ExecutionTime%3A%3APreCommit)~%0Aclass%20scheduled_trigger~TimeEventFilter(ExecutionTime%3A%3ASchedule(schedule))~%0A%0ATrigger%20--%3E%20time_trigger%0ATrigger%20--%3E%20by_call_trigger%0ATrigger%20--%3E%20data_trigger%0ATrigger%20--%3E%20pipeline_trigger%0A%0Atime_trigger%20--%3E%20precommit_trigger%20%0Atime_trigger%20--%3E%20scheduled_trigger"}),l])}const b=i(n,[["render",h]]);export{y as __pageData,b as default};
