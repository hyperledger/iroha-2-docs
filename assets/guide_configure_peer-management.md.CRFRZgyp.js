import{_ as e,c as t,o as a,V as r}from"./chunks/framework.B6c1f-8R.js";const g=JSON.parse('{"title":"Peer Management","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configure/peer-management.md","filePath":"guide/configure/peer-management.md","lastUpdated":1727363525000}'),i={name:"guide/configure/peer-management.md"},o=r('<h1 id="peer-management" tabindex="-1">Peer Management <a class="header-anchor" href="#peer-management" aria-label="Permalink to &quot;Peer Management&quot;">​</a></h1><p>If you followed any of the language-specific guides, you now have a well-functioning network that people will want to join.</p><h2 id="public-blockchain" tabindex="-1">Public Blockchain <a class="header-anchor" href="#public-blockchain" aria-label="Permalink to &quot;Public Blockchain&quot;">​</a></h2><p>Naturally, in a public blockchain, joining is a matter of installing the correct software and waiting until your node gets discovered.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Peer discovery is <a href="https://github.com/hyperledger/iroha/issues/1375" title="#1375" target="_blank" rel="noreferrer">under construction</a>.</p></div><h2 id="private-blockchain" tabindex="-1">Private Blockchain <a class="header-anchor" href="#private-blockchain" aria-label="Permalink to &quot;Private Blockchain&quot;">​</a></h2><p>In a bank setting, allowing everyone to join at their leisure is a security nightmare. For safety, automatic discovery of peers is turned off for Iroha 2 in the private blockchain configuration.</p><h3 id="registering-peers" tabindex="-1">Registering peers <a class="header-anchor" href="#registering-peers" aria-label="Permalink to &quot;Registering peers&quot;">​</a></h3><p>To add a peer to the network, it must be manually registered. Let&#39;s discuss the steps that should be taken in order to complete this process.</p><h4 id="_1-grant-the-user-permissions" tabindex="-1">1. Grant the user permissions <a class="header-anchor" href="#_1-grant-the-user-permissions" aria-label="Permalink to &quot;1. Grant the user permissions&quot;">​</a></h4><p>The user that registers the peer must have the appropriate <code>PermissionToken</code>. This could be granted as part of a <code>role</code>, or as part of a one-time allowance.</p><p>How to decide if you need to grant a role? Granting roles makes sense if a user is to serve as an administrator of sorts, where it&#39;s their responsibility to maintain the peers in the network long-term. A one-time permission grant is useful when the party registering the peer isn&#39;t responsible for registering peers in general, but the network administrator doesn&#39;t need to (or want to) spend time setting up a new peer.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Permissions for registering a peer are under construction.</p></div><p>We discuss permissions and roles with more detail in a <a href="/iroha-2-docs/blockchain/permissions.html">separate chapter</a>.</p><h4 id="_2-set-up-a-peer" tabindex="-1">2. Set up a peer <a class="header-anchor" href="#_2-set-up-a-peer" aria-label="Permalink to &quot;2. Set up a peer&quot;">​</a></h4><p>After a new peer was granted permissions, it must be set up.</p><p>It&#39;s a good idea to request information about the peers&#39; configuration in the network. Your best friend is the <code>configuration</code> endpoint of the API socket. Thus far querying is done manually. Until the <a href="https://github.com/hyperledger/iroha/issues/1184" title="#1184" target="_blank" rel="noreferrer">bootstrapping procedure</a> is implemented, you&#39;ll have to manually check that the timeouts and batch sizes match.</p><p>To simplify the process, you can ask the network administrator for a redacted version of <code>config.json</code>, which excludes privileged information, such as <code>PRIVATE_KEY</code>s.</p><h4 id="_3-submit-the-instruction" tabindex="-1">3. Submit the instruction <a class="header-anchor" href="#_3-submit-the-instruction" aria-label="Permalink to &quot;3. Submit the instruction&quot;">​</a></h4><p><em>After</em> your peer is running, you should submit the <em>register peer</em> instruction. The peer will go through the handshake process and start chatting with the network.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Submitting a <code>Register&lt;Peer&gt;</code> instruction <strong>does not</strong> (and cannot) instantiate a <em>new peer process</em>.</p></div><h3 id="unregistering-peers" tabindex="-1">Unregistering peers <a class="header-anchor" href="#unregistering-peers" aria-label="Permalink to &quot;Unregistering peers&quot;">​</a></h3><p>What about unregistering peers? For security reasons this process is one-sided. The network reaches consensus that it wants to remove a peer, but the peer itself doesn&#39;t know much about why nobody&#39;s talking to it.</p><p>In most circumstances, if you want to unregister a peer, you want to do so because it is a Byzantine fault. Just &quot;ghosting&quot; this peer makes the life of the malicious actor on the network harder.</p>',24),s=[o];function n(c,h,p,l,u,d){return a(),t("div",null,s)}const f=e(i,[["render",n]]);export{g as __pageData,f as default};
