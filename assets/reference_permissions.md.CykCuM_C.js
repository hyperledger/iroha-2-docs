import{_ as s,c as i,o as t,V as e}from"./chunks/framework.B6c1f-8R.js";const g=JSON.parse('{"title":"Permissions","description":"","frontmatter":{},"headers":[],"relativePath":"reference/permissions.md","filePath":"reference/permissions.md","lastUpdated":1727363525000}'),a={name:"reference/permissions.md"},n=e(`<h1 id="permissions" tabindex="-1">Permissions <a class="header-anchor" href="#permissions" aria-label="Permalink to &quot;Permissions&quot;">​</a></h1><p>This section provides details about pre-configured permission tokens in Iroha 2. For more general information on permission tokens and permission groups (roles), refer to the <a href="/iroha-2-docs/blockchain/permissions.html">Permissions</a> chapter in Guide.</p><h2 id="permission-tokens" tabindex="-1">Permission Tokens <a class="header-anchor" href="#permission-tokens" aria-label="Permalink to &quot;Permission Tokens&quot;">​</a></h2><p>The following permission tokens are pre-configured in Iroha 2:</p><table><thead><tr><th>Permission Token</th><th>Category</th><th>Operation</th></tr></thead><tbody><tr><td>[<code>CanUnregisterDomain</code>]</td><td>Domain</td><td>Allows to unregister a domain</td></tr><tr><td>[<code>CanSetKeyValueInDomain</code>]</td><td>Domain</td><td>Allows to add domain&#39;s metadata key value</td></tr><tr><td>[<code>CanRemoveKeyValueInDomain</code>]</td><td>Domain</td><td>Allows to remove domain&#39;s metadata key value</td></tr><tr><td>[<code>CanUnregisterAccount</code>]</td><td>Account</td><td>Allows to unregister an account</td></tr><tr><td>[<code>CanMintUserPublicKeys</code>]</td><td>Account</td><td>Allows to add a public key to an account</td></tr><tr><td>[<code>CanBurnUserPublicKeys</code>]</td><td>Account</td><td>Allows to remove a public key from an account</td></tr><tr><td>[<code>CanMintUserSignatureCheckConditions</code>]</td><td>Account</td><td>Allows to set check conditions for a signature</td></tr><tr><td>[<code>CanSetKeyValueInUserAccount</code>]</td><td>Account</td><td>Allows to add user&#39;s metadata key value</td></tr><tr><td>[<code>CanRemoveKeyValueInUserAccount</code>]</td><td>Account</td><td>Allows to remove user&#39;s metadata key value</td></tr><tr><td>[<code>CanRegisterAssetsWithDefinition</code>]</td><td>Asset</td><td>Allows to register a new asset with this definition</td></tr><tr><td>[<code>CanUnregisterAssetsWithDefinition</code>]</td><td>Asset</td><td>Allows to unregister a new asset with this definition</td></tr><tr><td>[<code>CanUnregisterUserAsset</code>]</td><td>Asset</td><td>Allows to remove asset from a user</td></tr><tr><td>[<code>CanMintAssetsWithDefinition</code>]</td><td>Asset</td><td>Allows to mint quantity of assets with this definition</td></tr><tr><td>[<code>CanBurnAssetsWithDefinition</code>]</td><td>Asset</td><td>Allows to burn quantity of assets with this definition</td></tr><tr><td>[<code>CanTransferAssetsWithDefinition</code>]</td><td>Asset</td><td>Allows to transfer quantity of assets with this definition</td></tr><tr><td>[<code>CanBurnUserAsset</code>]</td><td>Asset</td><td>Allows to burn user&#39;s asset quantity</td></tr><tr><td>[<code>CanTransferUserAsset</code>]</td><td>Asset</td><td>Allows to transfer user&#39;s asset quantity</td></tr><tr><td>[<code>CanSetKeyValueInUserAsset</code>]</td><td>Asset</td><td>Allows to set key value to user&#39;s asset metadata</td></tr><tr><td>[<code>CanRemoveKeyValueInUserAsset</code>]</td><td>Asset</td><td>Allows to remove key value from user&#39;s asset metadata</td></tr><tr><td>[<code>CanSetKeyValueInAssetDefinition</code>]</td><td>Asset Definition</td><td>Allows to add key value to metadata for this asset definition</td></tr><tr><td>[<code>CanRemoveKeyValueInAssetDefinition</code>]</td><td>Asset Definition</td><td>Allows to remove key value from metadata for this asset definition</td></tr><tr><td>[<code>CanUnregisterAssetDefinition</code>]</td><td>Asset Definition</td><td>Allows to unregister this asset definition</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The way permissions work in Iroha 2 is subject to change. Only an owner of the subject can grant permissions for the subject.</p><p>By default, all assets and accounts defined in the genesis block configuration file are created by <code>genesis@genesis</code> account. This means that <code>alice@wonderland</code> is not the owner of <code>rose#wonderland</code> and cannot grant permission for <code>rose#wonderland</code>.</p><p>To avoid this you can:</p><ol><li>Edit the <code>genesis.json</code> file to only include the creation of <code>alice@wonderland</code>, and then redeploy Iroha 2.</li><li>Create a subject (e.g., an asset definition) on behalf of <code>alice@wonderland</code>, and then give another account the permission to manage this subject.</li></ol></div><h3 id="general-example" tabindex="-1"><code>General example</code> <a class="header-anchor" href="#general-example" aria-label="Permalink to &quot;\`General example\`&quot;">​</a></h3><p>With this example, the owner-account can give permission for its subject to another account. The example is based on the following pre-conditions: The subject is created by the owner-account The recipient account is created</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define the asset definition owner</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asset_definition_owner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alice@wonderland&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define the asset definition id which was created by the owner</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asset_definition_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AssetDefinitionId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;coolAsset#wonderland&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define the account which we want to give the permission</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> recipient_account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;actor@wonderland&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a token that we chose. And define its structure according to \`iroha_executor\\smart_contract\\executor\\src\\default.rs\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> can_mint_asset_with_definition_token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PermissionToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CanMintAssetsWithDefinition&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asset_definition_id&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asset_definition_id }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a permission expression (Grant\\Revoke)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> permission_expression </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GrantExpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(can_mint_asset_with_definition_token, recipients_account);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Submit the transaction with the permission expression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iroha_client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit_blocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(permission_expression)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,9),d=[n];function o(r,h,l,p,k,c){return t(),i("div",null,d)}const y=s(a,[["render",o]]);export{g as __pageData,y as default};
