import{_ as e,c as o,o as t,V as a}from"./chunks/framework.B6c1f-8R.js";const f=JSON.parse('{"title":"Keys for Network Deployment","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configure/keys-for-network-deployment.md","filePath":"guide/configure/keys-for-network-deployment.md","lastUpdated":1727363525000}'),r={name:"guide/configure/keys-for-network-deployment.md"},i=a('<h1 id="keys-for-network-deployment" tabindex="-1">Keys for Network Deployment <a class="header-anchor" href="#keys-for-network-deployment" aria-label="Permalink to &quot;Keys for Network Deployment&quot;">​</a></h1><p>If you&#39;re deploying your own Iroha 2 network, your unique cryptographic keys must be specified in all configuration files:</p><ol><li>Client configuration file: <a href="./client-configuration.html"><code>defaults/client.toml</code></a></li><li>Genesis block file: <a href="./genesis.html"><code>defaults/genesis.json</code></a></li></ol><p>To learn more about cryptographic keys and their role, see <a href="./../security/public-key-cryptography.html">Security &gt; Public Key Cryptography</a>.</p><h2 id="setting-keys-for-a-new-network" tabindex="-1">Setting Keys For a New Network <a class="header-anchor" href="#setting-keys-for-a-new-network" aria-label="Permalink to &quot;Setting Keys For a New Network&quot;">​</a></h2><h3 id="_1-generate-new-key-pairs" tabindex="-1">1. Generate New Key Pairs <a class="header-anchor" href="#_1-generate-new-key-pairs" aria-label="Permalink to &quot;1. Generate New Key Pairs&quot;">​</a></h3><p>To generate new key pairs for the peers, a wide variety of methods can be used. However, within the Iroha 2 framework, you can conveniently use the built-in <code>kagami</code> tool for generating cryptographic keys.</p><p>To generate a new key pair run the following command from the project&#39;s <code>root</code> directory:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo run --bin kagami --release -- crypto --json</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The output cryptographic keys generated by <code>kagami</code> are customizable by using preferences. Note that in the example above the <code>--json</code> parameter is specified to generate a key pair in the JSON format.</p><p>To learn more about generating cryptographic keys with <code>kagami</code>, available algorithms, and other parameters, see <a href="/iroha-2-docs/guide/security/generating-cryptographic-keys.html#kagami">Generating Cryptographic Keys with Kagami</a>.</p></div><p>If you plan to use the generated <code>private_key</code> with one of our SDKs, note that even though cryptographic keys are commonly encoded using ASCII characters, both the <code>payload</code> value of the <code>private_key</code> and the string representation of the <code>public_key</code> are encoded as Hex.</p><h3 id="_2-update-keys-for-peers" tabindex="-1">2. Update Keys For Peers <a class="header-anchor" href="#_2-update-keys-for-peers" aria-label="Permalink to &quot;2. Update Keys For Peers&quot;">​</a></h3><p>If you want to set up your own network, you should change the keys for all your peers: in <code>peer/config.json</code> change <code>PUBLIC_KEY</code> and <code>PRIVATE_KEY</code> to the fresh pair. When you&#39;ve done that, you should add the keys to the <code>TRUSTED_PEERS</code> array in the same configuration file. Every peer that wants to connect to the given peer from the outside must know its <code>PRIVATE_KEY</code> specified in the <code>TRUSTED_PEERS</code> section.</p><p>To create a minimum <a href="/iroha-2-docs/reference/glossary.html#byzantine-fault-tolerance-bft">BFT</a> network one needs four peers, which means four different private keys split across four different configuration files (or environment variables).</p><p>Each peer must have their own <code>PUBLIC_KEY</code> and <code>PRIVATE_KEY</code> variables specified. All four of the public keys—including the peer that is being configured—must be added to the <code>TRUSTED_PEERS</code> array. The same <code>TRUSTED_PEERS</code> array must be copied across all four of the configuration files. If either one of the peers is missing, or there&#39;s an extraneous peer or one of the peers has the incorrect key, the network will fail to start.</p><p>After that, make sure that the peers agree on the <code>GENESIS_ACCOUNT</code> key pairs. Failure to do so will result in a network which cannot accept any transactions.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Even though the private key for the genesis account is known to all peers, the account itself loses all privileges after the first block is committed.</p></div><h2 id="_3-register-a-non-genesis-account" tabindex="-1">3. Register a Non-Genesis Account <a class="header-anchor" href="#_3-register-a-non-genesis-account" aria-label="Permalink to &quot;3. Register a Non-Genesis Account&quot;">​</a></h2><p>Finally, while the first client <em>could</em> use the genesis account to register new users, it&#39;s not a great idea for most networks. You should, instead, register a non-genesis account (for example, <code>alice@wonderland</code>).</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>iroha</code> binary currently processes all of its instructions in the JSON format, it also provides a dedicated instruction to unregister accounts.</p><p>If you plan on creating a private blockchain, you should consider writing your own client based on the <code>client</code> Rust crate, or any of the provided client libraries:</p><ul><li><a href="https://github.com/hyperledger/iroha-python" target="_blank" rel="noreferrer">iroha-python</a></li><li><a href="https://github.com/hyperledger/iroha-ios" target="_blank" rel="noreferrer">iroha-iOS</a></li><li><a href="https://github.com/hyperledger/iroha-java" target="_blank" rel="noreferrer">iroha-java</a></li><li><a href="https://github.com/hyperledger/iroha-javascript" target="_blank" rel="noreferrer">iroha-javascript</a></li></ul></div>',20),n=[i];function s(c,l,h,d,p,u){return t(),o("div",null,n)}const g=e(r,[["render",s]]);export{f as __pageData,g as default};
