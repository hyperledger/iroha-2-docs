import{_ as s,c as a,o as i,V as e}from"./chunks/framework.B6c1f-8R.js";const g=JSON.parse('{"title":"Client Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configure/client-configuration.md","filePath":"guide/configure/client-configuration.md","lastUpdated":1727363525000}'),t={name:"guide/configure/client-configuration.md"},n=e(`<h1 id="client-configuration" tabindex="-1">Client Configuration <a class="header-anchor" href="#client-configuration" aria-label="Permalink to &quot;Client Configuration&quot;">​</a></h1><p>Let&#39;s look at the client configuration options.</p><details class="details custom-block"><summary>Client configuration template</summary><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># chain_id =</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Might be set via \`TORII_URL\` env var</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># torii_url =</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basic_auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># login =</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># password =</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">account</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># id =</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># public_key =</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># private_key =</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># time_to_live = &quot;100s&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># status_timeout = &quot;100s&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Nonce is TODO describe what it is</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nonce = false</span></span></code></pre></div></details><h2 id="generation" tabindex="-1">Generation <a class="header-anchor" href="#generation" aria-label="Permalink to &quot;Generation&quot;">​</a></h2><p>You can use <code>kagami</code> to generate the default client configuration:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kagami config client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-config.json</span></span></code></pre></div><h2 id="public-and-private-keys" tabindex="-1">Public and Private Keys <a class="header-anchor" href="#public-and-private-keys" aria-label="Permalink to &quot;Public and Private Keys&quot;">​</a></h2><p>The <code>defaults/client.toml</code> client configuration file should contain the user&#39;s <code>domain</code> and a pair of their cryptographic keys: <code>public_key</code> and <code>private_key</code>.</p><p>For details on cryptographic keys, see <a href="./../security/public-key-cryptography.html">Public Key Cryptography</a>.</p><h2 id="user-account" tabindex="-1">User account <a class="header-anchor" href="#user-account" aria-label="Permalink to &quot;User account&quot;">​</a></h2><p>The <code>ACCOUNT_ID</code> should be self-explanatory. The only thing you need to worry about is that the account must already exist in the blockchain. In other words, the account you provide here should already be <a href="/iroha-2-docs/blockchain/instructions.html#un-register">registered</a>.</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>Iroha is <strong>case-sensitive</strong>, meaning that <em>Alice</em>@wonderland is different from <em>alice</em>@wonderland. It should go without saying that <em>alice@wonderland</em> is not the same as <em>alice@looking_glass</em> either, since these accounts belong to different domains, <code>wonderland</code> and <code>looking_glass</code>.</p></div><h2 id="basic-authentication-credentials" tabindex="-1">Basic Authentication Credentials <a class="header-anchor" href="#basic-authentication-credentials" aria-label="Permalink to &quot;Basic Authentication Credentials&quot;">​</a></h2><p>The idea of basic authentication credentials is to provide the access control using a web server with a reverse proxy like <a href="https://www.nginx.com/" target="_blank" rel="noreferrer">Nginx</a> while these credentials are ignored by the Iroha peers.</p><p>The login and password will be filled by the client and used for the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization" target="_blank" rel="noreferrer"><code>Authorization</code></a> HTTP <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noreferrer">header</a>.</p><p>Use this style of configuration to provide the basic authentication credentials (login and password):</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;BASIC_AUTH&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;web_login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mad_hatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ilovetea&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><h2 id="iroha-public-addresses" tabindex="-1">Iroha Public Addresses <a class="header-anchor" href="#iroha-public-addresses" aria-label="Permalink to &quot;Iroha Public Addresses&quot;">​</a></h2><p><code>TORII</code> is the module in charge of handling incoming and outgoing connections. For client configuration, you can set up two addresses: <code>TORII_API_URL</code> and <code>TORII_TELEMETRY_URL</code>.</p><h3 id="torii-api-url" tabindex="-1"><code>TORII_API_URL</code> <a class="header-anchor" href="#torii-api-url" aria-label="Permalink to &quot;\`TORII_API_URL\`&quot;">​</a></h3><p>First, the <code>TORII_API_URL</code> is the same as <code>TORII</code> <code>API_URL</code> in the <a href="./peer-configuration.html#api-url">peer configuration</a>. This is the module responsible for handling incoming and outgoing connections. You should also add the prefix <code>http://</code> or (<em>preferably</em>) <code>https://</code> to the address. For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TORII_API_URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://127.0.0.1:8080&quot;</span></span></code></pre></div><h3 id="torii-telemetry-url" tabindex="-1"><code>TORII_TELEMETRY_URL</code> <a class="header-anchor" href="#torii-telemetry-url" aria-label="Permalink to &quot;\`TORII_TELEMETRY_URL\`&quot;">​</a></h3><p>The <code>TORII_TELEMETRY_URL</code> is used to specify the prometheus endpoint address. You can set <code>TORII_TELEMETRY_URL</code> like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TORII_TELEMETRY_URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://127.0.0.1:8180&quot;</span></span></code></pre></div><p>A <code>GET</code> request to the <code>127.0.0.1:8180/status</code> will give you a JSON-encoded representation of the top-level metrics, while a <code>GET</code> request to <code>127.0.0.1:8180/metrics</code> will give you a (somewhat verbose) list of all available metrics gathered in Iroha. You might want to change this if you&#39;re having trouble gathering metrics using <code>prometheus</code>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Learn how to <a href="/iroha-2-docs/guide/advanced/metrics.html">monitor Iroha performance</a> using prometheus.</p></div><h2 id="transaction-limits" tabindex="-1">Transaction Limits <a class="header-anchor" href="#transaction-limits" aria-label="Permalink to &quot;Transaction Limits&quot;">​</a></h2><p>You can specify the transaction limits that each transaction must adhere to: the maximum number of instructions and the maximum size of a WASM blob (in bytes). For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;max_instruction_number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4096</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;max_wasm_size_bytes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4194304</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="transaction-ttl-and-timeout" tabindex="-1">Transaction TTL and Timeout <a class="header-anchor" href="#transaction-ttl-and-timeout" aria-label="Permalink to &quot;Transaction TTL and Timeout&quot;">​</a></h2><p>Configure the time-to-live (TTL) for transactions and the timeout to wait for the status. Both values have to be provided in milliseconds. For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TRANSACTION_TIME_TO_LIVE_MS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TRANSACTION_STATUS_TIMEOUT_MS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><h2 id="transaction-nonce" tabindex="-1">Transaction Nonce <a class="header-anchor" href="#transaction-nonce" aria-label="Permalink to &quot;Transaction Nonce&quot;">​</a></h2><p>If you set <code>ADD_TRANSACTION_NONCE</code> to <code>true</code>, Iroha will create different hashes for transactions that occur repeatedly and simultaneously.</p>`,35),o=[n];function l(h,r,c,p,d,k){return i(),a("div",null,o)}const E=s(t,[["render",l]]);export{g as __pageData,E as default};
