import{_ as a,c as e,o as s,V as t}from"./chunks/framework.B6c1f-8R.js";const k=JSON.parse('{"title":"Install Iroha 2","description":"","frontmatter":{},"headers":[],"relativePath":"get-started/install-iroha-2.md","filePath":"get-started/install-iroha-2.md","lastUpdated":1727363525000}'),i={name:"get-started/install-iroha-2.md"},l=t('<h1 id="install-iroha-2" tabindex="-1">Install Iroha 2 <a class="header-anchor" href="#install-iroha-2" aria-label="Permalink to &quot;Install Iroha 2&quot;">​</a></h1><p>This tutorial guides you through the steps to install Iroha 2 and its necessary binaries on your machine.</p><h2 id="_1-prerequisites" tabindex="-1">1. Prerequisites <a class="header-anchor" href="#_1-prerequisites" aria-label="Permalink to &quot;1. Prerequisites&quot;">​</a></h2><p>To install Iroha 2, you need to set up the following first:</p><ul><li><a href="https://githowto.com/" target="_blank" rel="noreferrer">git</a></li><li><a href="https://www.openssl.org/" target="_blank" rel="noreferrer">OpenSSL</a></li><li><a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noreferrer">Rust Toolchain</a> (v1.60.0 or newer)</li></ul><details class="details custom-block"><summary>TIP: How to Install OpenSSL</summary><p>Note that in most Linux setups OpenSSL is already available to you.</p><ul><li><p>Install OpenSSL on Ubuntu:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo apt-get install libssl-dev</span></span></code></pre></div></li><li><p>Install OpenSSL on macOS using <a href="https://brew.sh/" target="_blank" rel="noreferrer">brew</a>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> brew install openssl</span></span></code></pre></div></li></ul><p>Check the <a href="https://github.com/openssl/openssl/blob/master/INSTALL.md" target="_blank" rel="noreferrer">OpenSSL installation guide</a> for details.</p></details><h2 id="_2-clone-iroha-from-github" tabindex="-1">2. Clone Iroha from GitHub <a class="header-anchor" href="#_2-clone-iroha-from-github" aria-label="Permalink to &quot;2. Clone Iroha from GitHub&quot;">​</a></h2><ol><li><p>Create a new directory for Iroha. In this tutorial we use <code>Git</code> as an example, but you can name it anything else:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir -p ~/Git</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>On macOS, if you get the <code>fatal: could not create work tree dir &#39;iroha&#39;: Read-only file system</code> error, that is because the home directory is not a real file system.</p><p>To fix this, create a directory named <code>Git</code>.</p></div></li><li><p>Enter the directory that you created:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd ~/Git</span></span></code></pre></div></li><li><p>Clone the <a href="https://github.com/hyperledger/iroha" target="_blank" rel="noreferrer"><code>iroha</code></a> GitHub repository:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git clone https://github.com/hyperledger/iroha.git</span></span></code></pre></div></li></ol><h3 id="_3-install-iroha-binaries" tabindex="-1">3. Install Iroha Binaries <a class="header-anchor" href="#_3-install-iroha-binaries" aria-label="Permalink to &quot;3. Install Iroha Binaries&quot;">​</a></h3><p>To get started you need two of the binaries shipped with Iroha:</p><ul><li><code>iroha</code>, the main command line tool for accessing the Iroha network as a user. It allows you to manage domains, accounts, and assets, and to query network status and events. To install <code>iroha</code> system-wide, use the following command:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo install --git https://github.com/hyperledger/iroha.git iroha_cli</span></span></code></pre></div><ul><li><code>kagami</code>, the tool that generates cryotpgraphic keys, configuration files and other necessary data. To install <code>kagami</code> system-wide, use the following command:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo install --git https://github.com/hyperledger/iroha.git iroha_kagami</span></span></code></pre></div>',14),o=[l];function r(n,h,p,d,c,g){return s(),e("div",null,o)}const b=a(i,[["render",r]]);export{k as __pageData,b as default};
