import{_ as s,c as i,o as a,V as e}from"./chunks/framework.B6c1f-8R.js";const u=JSON.parse('{"title":"WASM","description":"","frontmatter":{},"headers":[],"relativePath":"blockchain/wasm.md","filePath":"blockchain/wasm.md","lastUpdated":1727363525000}'),t={name:"blockchain/wasm.md"},n=e(`<h1 id="wasm" tabindex="-1">WASM <a class="header-anchor" href="#wasm" aria-label="Permalink to &quot;WASM&quot;">​</a></h1><p>While we had initially assumed that all operations within Iroha will be handled with instructions and conditionals, however, there are a few problems with this approach.</p><ul><li>The ISI syntax is verbose and ugly.</li><li>The ISI syntax is not familiar for most programmers.</li><li>While simple ISI smart contracts are compact (usually a few bytes), they need different kinds of manual optimisations.</li></ul><p>In the long run, all of these problems are taken care of by using a <strong>domain-specific language</strong>, which gets optimised and compiled into a sequence of instructions that executes fast and takes very little space in the blocks, but is also easy to understand. Something that looks like your traditional <code>if</code> statements and <code>for</code> loops.</p><p>However, in the interim, we have decided to use another portable binary standard called <strong>Web assembly</strong>, or <strong>WASM</strong>.</p><h2 id="working-with-wasm" tabindex="-1">Working with WASM <a class="header-anchor" href="#working-with-wasm" aria-label="Permalink to &quot;Working with WASM&quot;">​</a></h2><p>The main advantage of using the WASM format is that you can use any language you like (as long as it links statically against our helper library), and produce a 32-bit portable executable. The compilers take care of the optimisation, and you don&#39;t have to learn a new language (ahem... solidity... ahem), just to operate on the blockchain.</p><p>You&#39;d still need to use ISI from inside your WASM binary to do anything on-chain, as we explained earlier.</p><p>In theory, you can do anything you want just using ISI as it is a Turing-complete language. However, it&#39;ll be less convenient and efficient since you&#39;d need to use <a href="/iroha-2-docs/blockchain/metadata.html">metadata</a> as memory and write complex conditionals using just the tools that we&#39;ve provided in the <code>Expression</code> and ISI infrastructure. We highly recommend choosing a well-known programming language, such as Rust, to build the necessary logic out of simple instructions. This is much easier than trying to reinvent the wheel using ISI.</p><p>Moreover, as long as you fit within the limits of WASM runtime and the provided libraries, you can do anything (and everything) you want. The drawback is that this process is a tad more involved than just writing the ISI using the client libraries.</p><h2 id="simple-rust-smart-contract-example" tabindex="-1">Simple Rust Smart Contract Example <a class="header-anchor" href="#simple-rust-smart-contract-example" aria-label="Permalink to &quot;Simple Rust Smart Contract Example&quot;">​</a></h2><p>WASM projects, just like any other binary in Rust, need to be separate crates. Don&#39;t worry, it doesn&#39;t have to be big.</p><h3 id="_1-create-a-new-project" tabindex="-1">1. Create a new project <a class="header-anchor" href="#_1-create-a-new-project" aria-label="Permalink to &quot;1. Create a new project&quot;">​</a></h3><p>To get started, create a new project:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo new --lib</span></span></code></pre></div><p>Yes! We need the <code>lib</code> type; more on that later.</p><p>The <code>Cargo.toml</code> of your project should look something like this:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name  = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;smartcontract&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">edition = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2021&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">crate-type = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cdylib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iroha_wasm = { git = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/hyperledger/iroha/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Note that the crate type is <code>cdylib</code>. Most Rust code is linked in a non-portable architecture and OS-specific static manner, but WASM is a portable format. Since C ABI is the <em>lingua franca</em> of the programming world and there is no other stable Rust ABI (yet), Iroha relies on the C-linkage to generate WASM bindings. Thankfully, <code>iroha_wasm</code> takes care of everything related to <a href="/iroha-2-docs/reference/ffi.html">foreign function interfaces</a> (FFI), so you don&#39;t have to worry about things like <code>unsafe</code>, <code>repr(C)</code>, padding, alignment, and others.</p><p>The <code>iroha_wasm</code> crate contains all of the bindings, macros, and trait implementations that you&#39;d need to write the program, most notably the <code>iroha_wasm</code> attribute macro. The crate also exposes our <code>data_model</code>, which contains all of the basic ISI and types. The chosen serialisation format is <code>parity-scale-codec</code>, though there is a strong possibility it&#39;ll get replaced with a different (custom) serialisation format in the near future, as it seems to dominate the binary size<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><h3 id="_2-write-a-smart-contract" tabindex="-1">2. Write a smart contract <a class="header-anchor" href="#_2-write-a-smart-contract" aria-label="Permalink to &quot;2. Write a smart contract&quot;">​</a></h3><p>Now that we have the preliminaries nailed down, we get to write some code for our smart contract. In the <code>src/lib.rs</code> you should write the following:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#![no_std]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#![no_main]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> crate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alloc;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alloc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iroha_wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data_model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prelude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[iroha_wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iroha_wasm]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> smartcontract_entry_point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_account_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FindAllDomains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FindAllDomains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> domains</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Domain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">try_into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> domain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> domains {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> new_account_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mad_hatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            domain_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> domain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RegisterBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewAccount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_account_id)))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>To submit the instruction and run it, execute the following command (be sure to have a peer up):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cargo run --release</span></span></code></pre></div><p>What does this smart contract do? Let&#39;s see. It queries all of the currently existing domains and puts the results into a <code>std::vec::Vec</code>. In this case, <code>std::vec::Vec</code> has to be imported from <code>alloc</code>, as we use <code>no_std</code> (more on that <a href="#work-under-a-no-std-environment">later</a>). It is then used to add the user named <code>mad_hatter</code> to all of the existing domains.</p><p>Building the same logic out of <code>Expression</code> and <code>If</code> and <code>Sequence</code> would be significantly harder. Moreover, the actual low-level instructions that would run are very likely not going to be as well-optimised as what the compiler produces.</p><h2 id="advanced-smart-contracts-optimising-for-size" tabindex="-1">Advanced Smart Contracts: Optimising for Size <a class="header-anchor" href="#advanced-smart-contracts-optimising-for-size" aria-label="Permalink to &quot;Advanced Smart Contracts: Optimising for Size&quot;">​</a></h2><p>WASM smart contracts can get big. So big, in fact, that we might not let you store them in the blockchain. So how do you reduce the size? The most important modifications are done in <code>Cargo.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strip = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;debuginfo&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Remove debugging info from the binary</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">panic = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abort&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Abort panics as they are transcribed to Traps when compiling for WASM anyways</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lto = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # Use link-time-optimisation (it produces a notable decrease in binary size)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt-level = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;z&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Optimise for size vs speed with &quot;s&quot;/&quot;z&quot;(removes vectorization)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codegen-units = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Use one code generation unit (it further reduces the binary size but increases compilation time)</span></span></code></pre></div><p>Let&#39;s take a closer look at what you can do to reduce the size of the WASM binary.</p><h3 id="remove-debugging-info" tabindex="-1">Remove debugging info <a class="header-anchor" href="#remove-debugging-info" aria-label="Permalink to &quot;Remove debugging info&quot;">​</a></h3><p>Rust stores a lot of debug information (even when compiled in <code>release</code> mode), which is (as the name suggests) used for debugging a panic in your Rust application. As you would expect, this information increases the size of the compiled WASM significantly.</p><p>Normally, this would be a worthwhile trade-off, but not in our case. Firstly, since the WASM is stored on-chain, it will be permanently recorded in some block and take space on every full node of an Iroha network. Iroha stores a lot of its information in RAM, so storage space for WASM is at a premium.</p><p>Secondly, once the WASM smart contract is stored on-chain, the debug information is no longer accessible. Indeed, you shouldn&#39;t debug on a peer. Instead, you should replicate the conditions that caused the panic locally and debug on your personal machine.</p><h3 id="work-under-a-no-std-environment" tabindex="-1">Work under a <code>no_std</code> environment <a class="header-anchor" href="#work-under-a-no-std-environment" aria-label="Permalink to &quot;Work under a \`no_std\` environment&quot;">​</a></h3><p>Another step that we&#39;ve already taken involves working under a <code>no_std</code> environment. All of our size-related woes stem from Rust being predominantly statically linked. As such, breaking the standard library into more manageable crates, like using <code>alloc::vec</code> instead of <code>std::vec</code>, can help us reduce the size and compilation time<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p><h3 id="re-compile-libcore" tabindex="-1">Re-compile <code>libcore</code> <a class="header-anchor" href="#re-compile-libcore" aria-label="Permalink to &quot;Re-compile \`libcore\`&quot;">​</a></h3><p>Next, you&#39;re advised to re-compile <code>libcore</code> and any other standard library crate (e.g. <code>alloc</code>) to exclude the leftover panic-related code that comes with the prebuilt <code>core</code> library<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo +nightly build -Z build-std -Z build-std-features=panic_immediate_abort --target wasm32-unknown-unknown</span></span></code></pre></div><p>Unfortunately, this is an unstable feature. In other words, the developers of the Rust programming language can decide to change how this works, or remove this option entirely.</p><h3 id="use-tools-to-optimise-wasm-size" tabindex="-1">Use tools to optimise WASM size <a class="header-anchor" href="#use-tools-to-optimise-wasm-size" aria-label="Permalink to &quot;Use tools to optimise WASM size&quot;">​</a></h3><p>Finally, you can use an automated tool to optimise the size of the WASM binary. You could use <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noreferrer"><code>wasm-opt</code></a> or <a href="https://rustwasm.github.io/twiggy/" target="_blank" rel="noreferrer"><code>twiggy</code></a> to guide your manual optimisation efforts.</p><p>We highly advise using <code>wasm-opt</code> because it will often significantly reduce your binary size:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm-opt -Os -o output.wasm input.wasm</span></span></code></pre></div><h3 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h3><p>At some point, unfortunately, the smallest size of your WASM blob is going to be determined by the libraries that you need to use. Using all of the above steps on the provided smart contract can reduce it down to a manageable (for the blockchain) size.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Size is an important metric. We shall cover size-optimisation strategies as we go. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>It should be noted that excluding the standard library is necessary for compiling to the wasm32 target, and is thus mandatory. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><code>wasm-opt</code> can also be used to remove the debug sections. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>`,49),o=[n];function l(h,r,p,d,k,c){return a(),i("div",null,o)}const y=s(t,[["render",l]]);export{u as __pageData,y as default};
